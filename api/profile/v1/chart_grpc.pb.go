// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: profile/v1/chart.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChartService_ListChart_FullMethodName            = "/profile.v1.ChartService/ListChart"
	ChartService_SaveChart_FullMethodName            = "/profile.v1.ChartService/SaveChart"
	ChartService_SaveAsChart_FullMethodName          = "/profile.v1.ChartService/SaveAsChart"
	ChartService_LoadChart_FullMethodName            = "/profile.v1.ChartService/LoadChart"
	ChartService_DeleteChart_FullMethodName          = "/profile.v1.ChartService/DeleteChart"
	ChartService_ListStudyTemplate_FullMethodName    = "/profile.v1.ChartService/ListStudyTemplate"
	ChartService_SaveStudyTemplate_FullMethodName    = "/profile.v1.ChartService/SaveStudyTemplate"
	ChartService_LoadStudyTemplate_FullMethodName    = "/profile.v1.ChartService/LoadStudyTemplate"
	ChartService_DeleteStudyTemplates_FullMethodName = "/profile.v1.ChartService/DeleteStudyTemplates"
)

// ChartServiceClient is the client API for ChartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChartServiceClient interface {
	ListChart(ctx context.Context, in *ListChartRequest, opts ...grpc.CallOption) (*ListChartResponse, error)
	SaveChart(ctx context.Context, in *SaveChartRequest, opts ...grpc.CallOption) (*SaveChartResponse, error)
	SaveAsChart(ctx context.Context, in *SaveAsChartRequest, opts ...grpc.CallOption) (*SaveAsChartResponse, error)
	LoadChart(ctx context.Context, in *LoadChartRequest, opts ...grpc.CallOption) (*LoadChartResponse, error)
	DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (*DeleteChartResponse, error)
	ListStudyTemplate(ctx context.Context, in *ListStudyTemplateRequest, opts ...grpc.CallOption) (*ListStudyTemplateResponse, error)
	SaveStudyTemplate(ctx context.Context, in *SaveStudyTemplateRequest, opts ...grpc.CallOption) (*SaveStudyTemplateResponse, error)
	LoadStudyTemplate(ctx context.Context, in *LoadStudyTemplateRequest, opts ...grpc.CallOption) (*LoadStudyTemplateResponse, error)
	DeleteStudyTemplates(ctx context.Context, in *DeleteStudyTemplatesRequest, opts ...grpc.CallOption) (*DeleteStudyTemplatesResponse, error)
}

type chartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChartServiceClient(cc grpc.ClientConnInterface) ChartServiceClient {
	return &chartServiceClient{cc}
}

func (c *chartServiceClient) ListChart(ctx context.Context, in *ListChartRequest, opts ...grpc.CallOption) (*ListChartResponse, error) {
	out := new(ListChartResponse)
	err := c.cc.Invoke(ctx, ChartService_ListChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) SaveChart(ctx context.Context, in *SaveChartRequest, opts ...grpc.CallOption) (*SaveChartResponse, error) {
	out := new(SaveChartResponse)
	err := c.cc.Invoke(ctx, ChartService_SaveChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) SaveAsChart(ctx context.Context, in *SaveAsChartRequest, opts ...grpc.CallOption) (*SaveAsChartResponse, error) {
	out := new(SaveAsChartResponse)
	err := c.cc.Invoke(ctx, ChartService_SaveAsChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) LoadChart(ctx context.Context, in *LoadChartRequest, opts ...grpc.CallOption) (*LoadChartResponse, error) {
	out := new(LoadChartResponse)
	err := c.cc.Invoke(ctx, ChartService_LoadChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (*DeleteChartResponse, error) {
	out := new(DeleteChartResponse)
	err := c.cc.Invoke(ctx, ChartService_DeleteChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) ListStudyTemplate(ctx context.Context, in *ListStudyTemplateRequest, opts ...grpc.CallOption) (*ListStudyTemplateResponse, error) {
	out := new(ListStudyTemplateResponse)
	err := c.cc.Invoke(ctx, ChartService_ListStudyTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) SaveStudyTemplate(ctx context.Context, in *SaveStudyTemplateRequest, opts ...grpc.CallOption) (*SaveStudyTemplateResponse, error) {
	out := new(SaveStudyTemplateResponse)
	err := c.cc.Invoke(ctx, ChartService_SaveStudyTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) LoadStudyTemplate(ctx context.Context, in *LoadStudyTemplateRequest, opts ...grpc.CallOption) (*LoadStudyTemplateResponse, error) {
	out := new(LoadStudyTemplateResponse)
	err := c.cc.Invoke(ctx, ChartService_LoadStudyTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartServiceClient) DeleteStudyTemplates(ctx context.Context, in *DeleteStudyTemplatesRequest, opts ...grpc.CallOption) (*DeleteStudyTemplatesResponse, error) {
	out := new(DeleteStudyTemplatesResponse)
	err := c.cc.Invoke(ctx, ChartService_DeleteStudyTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartServiceServer is the server API for ChartService service.
// All implementations must embed UnimplementedChartServiceServer
// for forward compatibility
type ChartServiceServer interface {
	ListChart(context.Context, *ListChartRequest) (*ListChartResponse, error)
	SaveChart(context.Context, *SaveChartRequest) (*SaveChartResponse, error)
	SaveAsChart(context.Context, *SaveAsChartRequest) (*SaveAsChartResponse, error)
	LoadChart(context.Context, *LoadChartRequest) (*LoadChartResponse, error)
	DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartResponse, error)
	ListStudyTemplate(context.Context, *ListStudyTemplateRequest) (*ListStudyTemplateResponse, error)
	SaveStudyTemplate(context.Context, *SaveStudyTemplateRequest) (*SaveStudyTemplateResponse, error)
	LoadStudyTemplate(context.Context, *LoadStudyTemplateRequest) (*LoadStudyTemplateResponse, error)
	DeleteStudyTemplates(context.Context, *DeleteStudyTemplatesRequest) (*DeleteStudyTemplatesResponse, error)
	mustEmbedUnimplementedChartServiceServer()
}

// UnimplementedChartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChartServiceServer struct {
}

func (UnimplementedChartServiceServer) ListChart(context.Context, *ListChartRequest) (*ListChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChart not implemented")
}
func (UnimplementedChartServiceServer) SaveChart(context.Context, *SaveChartRequest) (*SaveChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveChart not implemented")
}
func (UnimplementedChartServiceServer) SaveAsChart(context.Context, *SaveAsChartRequest) (*SaveAsChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAsChart not implemented")
}
func (UnimplementedChartServiceServer) LoadChart(context.Context, *LoadChartRequest) (*LoadChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadChart not implemented")
}
func (UnimplementedChartServiceServer) DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChart not implemented")
}
func (UnimplementedChartServiceServer) ListStudyTemplate(context.Context, *ListStudyTemplateRequest) (*ListStudyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudyTemplate not implemented")
}
func (UnimplementedChartServiceServer) SaveStudyTemplate(context.Context, *SaveStudyTemplateRequest) (*SaveStudyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveStudyTemplate not implemented")
}
func (UnimplementedChartServiceServer) LoadStudyTemplate(context.Context, *LoadStudyTemplateRequest) (*LoadStudyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadStudyTemplate not implemented")
}
func (UnimplementedChartServiceServer) DeleteStudyTemplates(context.Context, *DeleteStudyTemplatesRequest) (*DeleteStudyTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudyTemplates not implemented")
}
func (UnimplementedChartServiceServer) mustEmbedUnimplementedChartServiceServer() {}

// UnsafeChartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChartServiceServer will
// result in compilation errors.
type UnsafeChartServiceServer interface {
	mustEmbedUnimplementedChartServiceServer()
}

func RegisterChartServiceServer(s grpc.ServiceRegistrar, srv ChartServiceServer) {
	s.RegisterService(&ChartService_ServiceDesc, srv)
}

func _ChartService_ListChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).ListChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_ListChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).ListChart(ctx, req.(*ListChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_SaveChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).SaveChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_SaveChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).SaveChart(ctx, req.(*SaveChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_SaveAsChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAsChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).SaveAsChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_SaveAsChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).SaveAsChart(ctx, req.(*SaveAsChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_LoadChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).LoadChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_LoadChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).LoadChart(ctx, req.(*LoadChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_DeleteChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).DeleteChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_DeleteChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).DeleteChart(ctx, req.(*DeleteChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_ListStudyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).ListStudyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_ListStudyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).ListStudyTemplate(ctx, req.(*ListStudyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_SaveStudyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStudyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).SaveStudyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_SaveStudyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).SaveStudyTemplate(ctx, req.(*SaveStudyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_LoadStudyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadStudyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).LoadStudyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_LoadStudyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).LoadStudyTemplate(ctx, req.(*LoadStudyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartService_DeleteStudyTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartServiceServer).DeleteStudyTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChartService_DeleteStudyTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartServiceServer).DeleteStudyTemplates(ctx, req.(*DeleteStudyTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChartService_ServiceDesc is the grpc.ServiceDesc for ChartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.v1.ChartService",
	HandlerType: (*ChartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChart",
			Handler:    _ChartService_ListChart_Handler,
		},
		{
			MethodName: "SaveChart",
			Handler:    _ChartService_SaveChart_Handler,
		},
		{
			MethodName: "SaveAsChart",
			Handler:    _ChartService_SaveAsChart_Handler,
		},
		{
			MethodName: "LoadChart",
			Handler:    _ChartService_LoadChart_Handler,
		},
		{
			MethodName: "DeleteChart",
			Handler:    _ChartService_DeleteChart_Handler,
		},
		{
			MethodName: "ListStudyTemplate",
			Handler:    _ChartService_ListStudyTemplate_Handler,
		},
		{
			MethodName: "SaveStudyTemplate",
			Handler:    _ChartService_SaveStudyTemplate_Handler,
		},
		{
			MethodName: "LoadStudyTemplate",
			Handler:    _ChartService_LoadStudyTemplate_Handler,
		},
		{
			MethodName: "DeleteStudyTemplates",
			Handler:    _ChartService_DeleteStudyTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile/v1/chart.proto",
}
