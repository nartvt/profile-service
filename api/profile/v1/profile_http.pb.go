// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.3
// source: profile/v1/profile.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProfileServiceGetListUserProfileInternal = "/profile.v1.ProfileService/GetListUserProfileInternal"
const OperationProfileServiceGetUserProfile = "/profile.v1.ProfileService/GetUserProfile"
const OperationProfileServiceGetUserProfileInternal = "/profile.v1.ProfileService/GetUserProfileInternal"
const OperationProfileServiceListenUserAccount = "/profile.v1.ProfileService/ListenUserAccount"
const OperationProfileServiceUpdateLanguage = "/profile.v1.ProfileService/UpdateLanguage"

type ProfileServiceHTTPServer interface {
	GetListUserProfileInternal(context.Context, *GetListUserProfileInternalRequest) (*GetListUserProfileResponse, error)
	GetUserProfile(context.Context, *emptypb.Empty) (*GetUserProfileResponse, error)
	GetUserProfileInternal(context.Context, *GetUserProfileInternalRequest) (*GetUserProfileResponse, error)
	ListenUserAccount(context.Context, *ListenUserAccountRequest) (*emptypb.Empty, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*UpdateLanguageResponse, error)
}

func RegisterProfileServiceHTTPServer(s *http.Server, srv ProfileServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/internal/profile/v1/hook/user", _ProfileService_ListenUserAccount0_HTTP_Handler(srv))
	r.GET("/api/profile/v1/info", _ProfileService_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/internal/profile/v1/info", _ProfileService_GetUserProfileInternal0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/language", _ProfileService_UpdateLanguage0_HTTP_Handler(srv))
	r.POST("/internal/profile/v1/list-info", _ProfileService_GetListUserProfileInternal0_HTTP_Handler(srv))
}

func _ProfileService_ListenUserAccount0_HTTP_Handler(srv ProfileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenUserAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileServiceListenUserAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListenUserAccount(ctx, req.(*ListenUserAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ProfileService_GetUserProfile0_HTTP_Handler(srv ProfileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileServiceGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _ProfileService_GetUserProfileInternal0_HTTP_Handler(srv ProfileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileInternalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileServiceGetUserProfileInternal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfileInternal(ctx, req.(*GetUserProfileInternalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _ProfileService_UpdateLanguage0_HTTP_Handler(srv ProfileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLanguageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileServiceUpdateLanguage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateLanguageResponse)
		return ctx.Result(200, reply)
	}
}

func _ProfileService_GetListUserProfileInternal0_HTTP_Handler(srv ProfileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetListUserProfileInternalRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProfileServiceGetListUserProfileInternal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetListUserProfileInternal(ctx, req.(*GetListUserProfileInternalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetListUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

type ProfileServiceHTTPClient interface {
	GetListUserProfileInternal(ctx context.Context, req *GetListUserProfileInternalRequest, opts ...http.CallOption) (rsp *GetListUserProfileResponse, err error)
	GetUserProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	GetUserProfileInternal(ctx context.Context, req *GetUserProfileInternalRequest, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	ListenUserAccount(ctx context.Context, req *ListenUserAccountRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateLanguage(ctx context.Context, req *UpdateLanguageRequest, opts ...http.CallOption) (rsp *UpdateLanguageResponse, err error)
}

type ProfileServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewProfileServiceHTTPClient(client *http.Client) ProfileServiceHTTPClient {
	return &ProfileServiceHTTPClientImpl{client}
}

func (c *ProfileServiceHTTPClientImpl) GetListUserProfileInternal(ctx context.Context, in *GetListUserProfileInternalRequest, opts ...http.CallOption) (*GetListUserProfileResponse, error) {
	var out GetListUserProfileResponse
	pattern := "/internal/profile/v1/list-info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProfileServiceGetListUserProfileInternal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProfileServiceHTTPClientImpl) GetUserProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/api/profile/v1/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProfileServiceGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProfileServiceHTTPClientImpl) GetUserProfileInternal(ctx context.Context, in *GetUserProfileInternalRequest, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/internal/profile/v1/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProfileServiceGetUserProfileInternal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProfileServiceHTTPClientImpl) ListenUserAccount(ctx context.Context, in *ListenUserAccountRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/internal/profile/v1/hook/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProfileServiceListenUserAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProfileServiceHTTPClientImpl) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...http.CallOption) (*UpdateLanguageResponse, error) {
	var out UpdateLanguageResponse
	pattern := "/api/profile/v1/language"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProfileServiceUpdateLanguage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
