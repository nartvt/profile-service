// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.3
// source: profile/v1/chart.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChartServiceDeleteChart = "/profile.v1.ChartService/DeleteChart"
const OperationChartServiceDeleteStudyTemplates = "/profile.v1.ChartService/DeleteStudyTemplates"
const OperationChartServiceListChart = "/profile.v1.ChartService/ListChart"
const OperationChartServiceListStudyTemplate = "/profile.v1.ChartService/ListStudyTemplate"
const OperationChartServiceLoadChart = "/profile.v1.ChartService/LoadChart"
const OperationChartServiceLoadStudyTemplate = "/profile.v1.ChartService/LoadStudyTemplate"
const OperationChartServiceSaveAsChart = "/profile.v1.ChartService/SaveAsChart"
const OperationChartServiceSaveChart = "/profile.v1.ChartService/SaveChart"
const OperationChartServiceSaveStudyTemplate = "/profile.v1.ChartService/SaveStudyTemplate"

type ChartServiceHTTPServer interface {
	DeleteChart(context.Context, *DeleteChartRequest) (*DeleteChartResponse, error)
	DeleteStudyTemplates(context.Context, *DeleteStudyTemplatesRequest) (*DeleteStudyTemplatesResponse, error)
	ListChart(context.Context, *ListChartRequest) (*ListChartResponse, error)
	ListStudyTemplate(context.Context, *ListStudyTemplateRequest) (*ListStudyTemplateResponse, error)
	LoadChart(context.Context, *LoadChartRequest) (*LoadChartResponse, error)
	LoadStudyTemplate(context.Context, *LoadStudyTemplateRequest) (*LoadStudyTemplateResponse, error)
	SaveAsChart(context.Context, *SaveAsChartRequest) (*SaveAsChartResponse, error)
	SaveChart(context.Context, *SaveChartRequest) (*SaveChartResponse, error)
	SaveStudyTemplate(context.Context, *SaveStudyTemplateRequest) (*SaveStudyTemplateResponse, error)
}

func RegisterChartServiceHTTPServer(s *http.Server, srv ChartServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/profile/v1/chart/list", _ChartService_ListChart0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/chart/save", _ChartService_SaveChart0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/chart/save-as", _ChartService_SaveAsChart0_HTTP_Handler(srv))
	r.GET("/api/profile/v1/chart/load", _ChartService_LoadChart0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/chart/delete", _ChartService_DeleteChart0_HTTP_Handler(srv))
	r.GET("/api/profile/v1/study-template/list", _ChartService_ListStudyTemplate0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/study-template/save", _ChartService_SaveStudyTemplate0_HTTP_Handler(srv))
	r.GET("/api/profile/v1/study-template/load", _ChartService_LoadStudyTemplate0_HTTP_Handler(srv))
	r.POST("/api/profile/v1/study-template/delete", _ChartService_DeleteStudyTemplates0_HTTP_Handler(srv))
}

func _ChartService_ListChart0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChartRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceListChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChart(ctx, req.(*ListChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChartResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_SaveChart0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceSaveChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveChart(ctx, req.(*SaveChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveChartResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_SaveAsChart0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveAsChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceSaveAsChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveAsChart(ctx, req.(*SaveAsChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveAsChartResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_LoadChart0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoadChartRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceLoadChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoadChart(ctx, req.(*LoadChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadChartResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_DeleteChart0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceDeleteChart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChart(ctx, req.(*DeleteChartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChartResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_ListStudyTemplate0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStudyTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceListStudyTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStudyTemplate(ctx, req.(*ListStudyTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStudyTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_SaveStudyTemplate0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveStudyTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceSaveStudyTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveStudyTemplate(ctx, req.(*SaveStudyTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveStudyTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_LoadStudyTemplate0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoadStudyTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceLoadStudyTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoadStudyTemplate(ctx, req.(*LoadStudyTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoadStudyTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _ChartService_DeleteStudyTemplates0_HTTP_Handler(srv ChartServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStudyTemplatesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChartServiceDeleteStudyTemplates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStudyTemplates(ctx, req.(*DeleteStudyTemplatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStudyTemplatesResponse)
		return ctx.Result(200, reply)
	}
}

type ChartServiceHTTPClient interface {
	DeleteChart(ctx context.Context, req *DeleteChartRequest, opts ...http.CallOption) (rsp *DeleteChartResponse, err error)
	DeleteStudyTemplates(ctx context.Context, req *DeleteStudyTemplatesRequest, opts ...http.CallOption) (rsp *DeleteStudyTemplatesResponse, err error)
	ListChart(ctx context.Context, req *ListChartRequest, opts ...http.CallOption) (rsp *ListChartResponse, err error)
	ListStudyTemplate(ctx context.Context, req *ListStudyTemplateRequest, opts ...http.CallOption) (rsp *ListStudyTemplateResponse, err error)
	LoadChart(ctx context.Context, req *LoadChartRequest, opts ...http.CallOption) (rsp *LoadChartResponse, err error)
	LoadStudyTemplate(ctx context.Context, req *LoadStudyTemplateRequest, opts ...http.CallOption) (rsp *LoadStudyTemplateResponse, err error)
	SaveAsChart(ctx context.Context, req *SaveAsChartRequest, opts ...http.CallOption) (rsp *SaveAsChartResponse, err error)
	SaveChart(ctx context.Context, req *SaveChartRequest, opts ...http.CallOption) (rsp *SaveChartResponse, err error)
	SaveStudyTemplate(ctx context.Context, req *SaveStudyTemplateRequest, opts ...http.CallOption) (rsp *SaveStudyTemplateResponse, err error)
}

type ChartServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewChartServiceHTTPClient(client *http.Client) ChartServiceHTTPClient {
	return &ChartServiceHTTPClientImpl{client}
}

func (c *ChartServiceHTTPClientImpl) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...http.CallOption) (*DeleteChartResponse, error) {
	var out DeleteChartResponse
	pattern := "/api/profile/v1/chart/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartServiceDeleteChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) DeleteStudyTemplates(ctx context.Context, in *DeleteStudyTemplatesRequest, opts ...http.CallOption) (*DeleteStudyTemplatesResponse, error) {
	var out DeleteStudyTemplatesResponse
	pattern := "/api/profile/v1/study-template/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartServiceDeleteStudyTemplates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) ListChart(ctx context.Context, in *ListChartRequest, opts ...http.CallOption) (*ListChartResponse, error) {
	var out ListChartResponse
	pattern := "/api/profile/v1/chart/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChartServiceListChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) ListStudyTemplate(ctx context.Context, in *ListStudyTemplateRequest, opts ...http.CallOption) (*ListStudyTemplateResponse, error) {
	var out ListStudyTemplateResponse
	pattern := "/api/profile/v1/study-template/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChartServiceListStudyTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) LoadChart(ctx context.Context, in *LoadChartRequest, opts ...http.CallOption) (*LoadChartResponse, error) {
	var out LoadChartResponse
	pattern := "/api/profile/v1/chart/load"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChartServiceLoadChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) LoadStudyTemplate(ctx context.Context, in *LoadStudyTemplateRequest, opts ...http.CallOption) (*LoadStudyTemplateResponse, error) {
	var out LoadStudyTemplateResponse
	pattern := "/api/profile/v1/study-template/load"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChartServiceLoadStudyTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) SaveAsChart(ctx context.Context, in *SaveAsChartRequest, opts ...http.CallOption) (*SaveAsChartResponse, error) {
	var out SaveAsChartResponse
	pattern := "/api/profile/v1/chart/save-as"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartServiceSaveAsChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) SaveChart(ctx context.Context, in *SaveChartRequest, opts ...http.CallOption) (*SaveChartResponse, error) {
	var out SaveChartResponse
	pattern := "/api/profile/v1/chart/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartServiceSaveChart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChartServiceHTTPClientImpl) SaveStudyTemplate(ctx context.Context, in *SaveStudyTemplateRequest, opts ...http.CallOption) (*SaveStudyTemplateResponse, error) {
	var out SaveStudyTemplateResponse
	pattern := "/api/profile/v1/study-template/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChartServiceSaveStudyTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
