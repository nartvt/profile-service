// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nartvt/profile-service/ent/chart"
	"github.com/nartvt/profile-service/ent/predicate"
)

// ChartUpdate is the builder for updating Chart entities.
type ChartUpdate struct {
	config
	hooks    []Hook
	mutation *ChartMutation
}

// Where appends a list predicates to the ChartUpdate builder.
func (cu *ChartUpdate) Where(ps ...predicate.Chart) *ChartUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ChartUpdate) SetUpdatedAt(t time.Time) *ChartUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *ChartUpdate) SetUserID(s string) *ChartUpdate {
	cu.mutation.SetUserID(s)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableUserID(s *string) *ChartUpdate {
	if s != nil {
		cu.SetUserID(*s)
	}
	return cu
}

// SetChartID sets the "chart_id" field.
func (cu *ChartUpdate) SetChartID(u uint32) *ChartUpdate {
	cu.mutation.ResetChartID()
	cu.mutation.SetChartID(u)
	return cu
}

// SetNillableChartID sets the "chart_id" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableChartID(u *uint32) *ChartUpdate {
	if u != nil {
		cu.SetChartID(*u)
	}
	return cu
}

// AddChartID adds u to the "chart_id" field.
func (cu *ChartUpdate) AddChartID(u int32) *ChartUpdate {
	cu.mutation.AddChartID(u)
	return cu
}

// ClearChartID clears the value of the "chart_id" field.
func (cu *ChartUpdate) ClearChartID() *ChartUpdate {
	cu.mutation.ClearChartID()
	return cu
}

// SetTemplateID sets the "template_id" field.
func (cu *ChartUpdate) SetTemplateID(s string) *ChartUpdate {
	cu.mutation.SetTemplateID(s)
	return cu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableTemplateID(s *string) *ChartUpdate {
	if s != nil {
		cu.SetTemplateID(*s)
	}
	return cu
}

// SetClientID sets the "client_id" field.
func (cu *ChartUpdate) SetClientID(s string) *ChartUpdate {
	cu.mutation.SetClientID(s)
	return cu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableClientID(s *string) *ChartUpdate {
	if s != nil {
		cu.SetClientID(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *ChartUpdate) SetType(s string) *ChartUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableType(s *string) *ChartUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ChartUpdate) SetName(s string) *ChartUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableName(s *string) *ChartUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetContent sets the "content" field.
func (cu *ChartUpdate) SetContent(s string) *ChartUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableContent(s *string) *ChartUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// SetSymbol sets the "symbol" field.
func (cu *ChartUpdate) SetSymbol(s string) *ChartUpdate {
	cu.mutation.SetSymbol(s)
	return cu
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableSymbol(s *string) *ChartUpdate {
	if s != nil {
		cu.SetSymbol(*s)
	}
	return cu
}

// SetResolution sets the "resolution" field.
func (cu *ChartUpdate) SetResolution(s string) *ChartUpdate {
	cu.mutation.SetResolution(s)
	return cu
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableResolution(s *string) *ChartUpdate {
	if s != nil {
		cu.SetResolution(*s)
	}
	return cu
}

// Mutation returns the ChartMutation object of the builder.
func (cu *ChartUpdate) Mutation() *ChartMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChartUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChartUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChartUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChartUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChartUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := chart.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ChartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chart.Table, chart.Columns, sqlgraph.NewFieldSpec(chart.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(chart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(chart.FieldUserID, field.TypeString, value)
	}
	if value, ok := cu.mutation.ChartID(); ok {
		_spec.SetField(chart.FieldChartID, field.TypeUint32, value)
	}
	if value, ok := cu.mutation.AddedChartID(); ok {
		_spec.AddField(chart.FieldChartID, field.TypeUint32, value)
	}
	if cu.mutation.ChartIDCleared() {
		_spec.ClearField(chart.FieldChartID, field.TypeUint32)
	}
	if value, ok := cu.mutation.TemplateID(); ok {
		_spec.SetField(chart.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := cu.mutation.ClientID(); ok {
		_spec.SetField(chart.FieldClientID, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(chart.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(chart.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(chart.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.Symbol(); ok {
		_spec.SetField(chart.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cu.mutation.Resolution(); ok {
		_spec.SetField(chart.FieldResolution, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChartUpdateOne is the builder for updating a single Chart entity.
type ChartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChartMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ChartUpdateOne) SetUpdatedAt(t time.Time) *ChartUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *ChartUpdateOne) SetUserID(s string) *ChartUpdateOne {
	cuo.mutation.SetUserID(s)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableUserID(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetUserID(*s)
	}
	return cuo
}

// SetChartID sets the "chart_id" field.
func (cuo *ChartUpdateOne) SetChartID(u uint32) *ChartUpdateOne {
	cuo.mutation.ResetChartID()
	cuo.mutation.SetChartID(u)
	return cuo
}

// SetNillableChartID sets the "chart_id" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableChartID(u *uint32) *ChartUpdateOne {
	if u != nil {
		cuo.SetChartID(*u)
	}
	return cuo
}

// AddChartID adds u to the "chart_id" field.
func (cuo *ChartUpdateOne) AddChartID(u int32) *ChartUpdateOne {
	cuo.mutation.AddChartID(u)
	return cuo
}

// ClearChartID clears the value of the "chart_id" field.
func (cuo *ChartUpdateOne) ClearChartID() *ChartUpdateOne {
	cuo.mutation.ClearChartID()
	return cuo
}

// SetTemplateID sets the "template_id" field.
func (cuo *ChartUpdateOne) SetTemplateID(s string) *ChartUpdateOne {
	cuo.mutation.SetTemplateID(s)
	return cuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableTemplateID(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetTemplateID(*s)
	}
	return cuo
}

// SetClientID sets the "client_id" field.
func (cuo *ChartUpdateOne) SetClientID(s string) *ChartUpdateOne {
	cuo.mutation.SetClientID(s)
	return cuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableClientID(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetClientID(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *ChartUpdateOne) SetType(s string) *ChartUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableType(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ChartUpdateOne) SetName(s string) *ChartUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableName(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetContent sets the "content" field.
func (cuo *ChartUpdateOne) SetContent(s string) *ChartUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableContent(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// SetSymbol sets the "symbol" field.
func (cuo *ChartUpdateOne) SetSymbol(s string) *ChartUpdateOne {
	cuo.mutation.SetSymbol(s)
	return cuo
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableSymbol(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetSymbol(*s)
	}
	return cuo
}

// SetResolution sets the "resolution" field.
func (cuo *ChartUpdateOne) SetResolution(s string) *ChartUpdateOne {
	cuo.mutation.SetResolution(s)
	return cuo
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableResolution(s *string) *ChartUpdateOne {
	if s != nil {
		cuo.SetResolution(*s)
	}
	return cuo
}

// Mutation returns the ChartMutation object of the builder.
func (cuo *ChartUpdateOne) Mutation() *ChartMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChartUpdate builder.
func (cuo *ChartUpdateOne) Where(ps ...predicate.Chart) *ChartUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChartUpdateOne) Select(field string, fields ...string) *ChartUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chart entity.
func (cuo *ChartUpdateOne) Save(ctx context.Context) (*Chart, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChartUpdateOne) SaveX(ctx context.Context) *Chart {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChartUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChartUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChartUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := chart.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ChartUpdateOne) sqlSave(ctx context.Context) (_node *Chart, err error) {
	_spec := sqlgraph.NewUpdateSpec(chart.Table, chart.Columns, sqlgraph.NewFieldSpec(chart.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chart.FieldID)
		for _, f := range fields {
			if !chart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(chart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(chart.FieldUserID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ChartID(); ok {
		_spec.SetField(chart.FieldChartID, field.TypeUint32, value)
	}
	if value, ok := cuo.mutation.AddedChartID(); ok {
		_spec.AddField(chart.FieldChartID, field.TypeUint32, value)
	}
	if cuo.mutation.ChartIDCleared() {
		_spec.ClearField(chart.FieldChartID, field.TypeUint32)
	}
	if value, ok := cuo.mutation.TemplateID(); ok {
		_spec.SetField(chart.FieldTemplateID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ClientID(); ok {
		_spec.SetField(chart.FieldClientID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(chart.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(chart.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(chart.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Symbol(); ok {
		_spec.SetField(chart.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Resolution(); ok {
		_spec.SetField(chart.FieldResolution, field.TypeString, value)
	}
	_node = &Chart{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
