// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nartvt/profile-service/ent/chart"
)

// ChartCreate is the builder for creating a Chart entity.
type ChartCreate struct {
	config
	mutation *ChartMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ChartCreate) SetCreatedAt(t time.Time) *ChartCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ChartCreate) SetNillableCreatedAt(t *time.Time) *ChartCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ChartCreate) SetUpdatedAt(t time.Time) *ChartCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ChartCreate) SetNillableUpdatedAt(t *time.Time) *ChartCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ChartCreate) SetUserID(s string) *ChartCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *ChartCreate) SetNillableUserID(s *string) *ChartCreate {
	if s != nil {
		cc.SetUserID(*s)
	}
	return cc
}

// SetChartID sets the "chart_id" field.
func (cc *ChartCreate) SetChartID(u uint32) *ChartCreate {
	cc.mutation.SetChartID(u)
	return cc
}

// SetNillableChartID sets the "chart_id" field if the given value is not nil.
func (cc *ChartCreate) SetNillableChartID(u *uint32) *ChartCreate {
	if u != nil {
		cc.SetChartID(*u)
	}
	return cc
}

// SetTemplateID sets the "template_id" field.
func (cc *ChartCreate) SetTemplateID(s string) *ChartCreate {
	cc.mutation.SetTemplateID(s)
	return cc
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (cc *ChartCreate) SetNillableTemplateID(s *string) *ChartCreate {
	if s != nil {
		cc.SetTemplateID(*s)
	}
	return cc
}

// SetClientID sets the "client_id" field.
func (cc *ChartCreate) SetClientID(s string) *ChartCreate {
	cc.mutation.SetClientID(s)
	return cc
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (cc *ChartCreate) SetNillableClientID(s *string) *ChartCreate {
	if s != nil {
		cc.SetClientID(*s)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *ChartCreate) SetType(s string) *ChartCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *ChartCreate) SetNillableType(s *string) *ChartCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ChartCreate) SetName(s string) *ChartCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *ChartCreate) SetNillableName(s *string) *ChartCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *ChartCreate) SetContent(s string) *ChartCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cc *ChartCreate) SetNillableContent(s *string) *ChartCreate {
	if s != nil {
		cc.SetContent(*s)
	}
	return cc
}

// SetSymbol sets the "symbol" field.
func (cc *ChartCreate) SetSymbol(s string) *ChartCreate {
	cc.mutation.SetSymbol(s)
	return cc
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (cc *ChartCreate) SetNillableSymbol(s *string) *ChartCreate {
	if s != nil {
		cc.SetSymbol(*s)
	}
	return cc
}

// SetResolution sets the "resolution" field.
func (cc *ChartCreate) SetResolution(s string) *ChartCreate {
	cc.mutation.SetResolution(s)
	return cc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (cc *ChartCreate) SetNillableResolution(s *string) *ChartCreate {
	if s != nil {
		cc.SetResolution(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ChartCreate) SetID(u uuid.UUID) *ChartCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ChartCreate) SetNillableID(u *uuid.UUID) *ChartCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the ChartMutation object of the builder.
func (cc *ChartCreate) Mutation() *ChartMutation {
	return cc.mutation
}

// Save creates the Chart in the database.
func (cc *ChartCreate) Save(ctx context.Context) (*Chart, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChartCreate) SaveX(ctx context.Context) *Chart {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChartCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChartCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChartCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := chart.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := chart.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.UserID(); !ok {
		v := chart.DefaultUserID
		cc.mutation.SetUserID(v)
	}
	if _, ok := cc.mutation.TemplateID(); !ok {
		v := chart.DefaultTemplateID
		cc.mutation.SetTemplateID(v)
	}
	if _, ok := cc.mutation.ClientID(); !ok {
		v := chart.DefaultClientID
		cc.mutation.SetClientID(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := chart.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.Name(); !ok {
		v := chart.DefaultName
		cc.mutation.SetName(v)
	}
	if _, ok := cc.mutation.Content(); !ok {
		v := chart.DefaultContent
		cc.mutation.SetContent(v)
	}
	if _, ok := cc.mutation.Symbol(); !ok {
		v := chart.DefaultSymbol
		cc.mutation.SetSymbol(v)
	}
	if _, ok := cc.mutation.Resolution(); !ok {
		v := chart.DefaultResolution
		cc.mutation.SetResolution(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := chart.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChartCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Chart.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Chart.updated_at"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Chart.user_id"`)}
	}
	if _, ok := cc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Chart.template_id"`)}
	}
	if _, ok := cc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "Chart.client_id"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Chart.type"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Chart.name"`)}
	}
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Chart.content"`)}
	}
	if _, ok := cc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Chart.symbol"`)}
	}
	if _, ok := cc.mutation.Resolution(); !ok {
		return &ValidationError{Name: "resolution", err: errors.New(`ent: missing required field "Chart.resolution"`)}
	}
	return nil
}

func (cc *ChartCreate) sqlSave(ctx context.Context) (*Chart, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChartCreate) createSpec() (*Chart, *sqlgraph.CreateSpec) {
	var (
		_node = &Chart{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chart.Table, sqlgraph.NewFieldSpec(chart.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(chart.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(chart.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(chart.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.ChartID(); ok {
		_spec.SetField(chart.FieldChartID, field.TypeUint32, value)
		_node.ChartID = value
	}
	if value, ok := cc.mutation.TemplateID(); ok {
		_spec.SetField(chart.FieldTemplateID, field.TypeString, value)
		_node.TemplateID = value
	}
	if value, ok := cc.mutation.ClientID(); ok {
		_spec.SetField(chart.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(chart.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(chart.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(chart.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.Symbol(); ok {
		_spec.SetField(chart.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := cc.mutation.Resolution(); ok {
		_spec.SetField(chart.FieldResolution, field.TypeString, value)
		_node.Resolution = value
	}
	return _node, _spec
}

// ChartCreateBulk is the builder for creating many Chart entities in bulk.
type ChartCreateBulk struct {
	config
	err      error
	builders []*ChartCreate
}

// Save creates the Chart entities in the database.
func (ccb *ChartCreateBulk) Save(ctx context.Context) ([]*Chart, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chart, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChartCreateBulk) SaveX(ctx context.Context) []*Chart {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChartCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChartCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
