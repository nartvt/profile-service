// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/nartvt/profile-service/ent/profile"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProfileCreate) SetCreatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProfileCreate) SetUpdatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableUpdatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *ProfileCreate) SetUserID(s string) *ProfileCreate {
	pc.mutation.SetUserID(s)
	return pc
}

// SetFullName sets the "full_name" field.
func (pc *ProfileCreate) SetFullName(s string) *ProfileCreate {
	pc.mutation.SetFullName(s)
	return pc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableFullName(s *string) *ProfileCreate {
	if s != nil {
		pc.SetFullName(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *ProfileCreate) SetEmail(s string) *ProfileCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetEmailConfirmedAt sets the "email_confirmed_at" field.
func (pc *ProfileCreate) SetEmailConfirmedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetEmailConfirmedAt(t)
	return pc
}

// SetPhone sets the "phone" field.
func (pc *ProfileCreate) SetPhone(s string) *ProfileCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (pc *ProfileCreate) SetPhoneConfirmedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetPhoneConfirmedAt(t)
	return pc
}

// SetLanguage sets the "language" field.
func (pc *ProfileCreate) SetLanguage(s string) *ProfileCreate {
	pc.mutation.SetLanguage(s)
	return pc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableLanguage(s *string) *ProfileCreate {
	if s != nil {
		pc.SetLanguage(*s)
	}
	return pc
}

// SetIsSSOUser sets the "is_sso_user" field.
func (pc *ProfileCreate) SetIsSSOUser(b bool) *ProfileCreate {
	pc.mutation.SetIsSSOUser(b)
	return pc
}

// SetNillableIsSSOUser sets the "is_sso_user" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableIsSSOUser(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetIsSSOUser(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProfileCreate) SetID(u uuid.UUID) *ProfileCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableID(u *uuid.UUID) *ProfileCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := profile.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := profile.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.FullName(); !ok {
		v := profile.DefaultFullName
		pc.mutation.SetFullName(v)
	}
	if _, ok := pc.mutation.Language(); !ok {
		v := profile.DefaultLanguage
		pc.mutation.SetLanguage(v)
	}
	if _, ok := pc.mutation.IsSSOUser(); !ok {
		v := profile.DefaultIsSSOUser
		pc.mutation.SetIsSSOUser(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := profile.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Profile.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Profile.updated_at"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Profile.user_id"`)}
	}
	if _, ok := pc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Profile.full_name"`)}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Profile.email"`)}
	}
	if _, ok := pc.mutation.EmailConfirmedAt(); !ok {
		return &ValidationError{Name: "email_confirmed_at", err: errors.New(`ent: missing required field "Profile.email_confirmed_at"`)}
	}
	if _, ok := pc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Profile.phone"`)}
	}
	if _, ok := pc.mutation.PhoneConfirmedAt(); !ok {
		return &ValidationError{Name: "phone_confirmed_at", err: errors.New(`ent: missing required field "Profile.phone_confirmed_at"`)}
	}
	if _, ok := pc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Profile.language"`)}
	}
	if _, ok := pc.mutation.IsSSOUser(); !ok {
		return &ValidationError{Name: "is_sso_user", err: errors.New(`ent: missing required field "Profile.is_sso_user"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(profile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(profile.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.FullName(); ok {
		_spec.SetField(profile.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.SetField(profile.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := pc.mutation.EmailConfirmedAt(); ok {
		_spec.SetField(profile.FieldEmailConfirmedAt, field.TypeTime, value)
		_node.EmailConfirmedAt = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(profile.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(profile.FieldPhoneConfirmedAt, field.TypeTime, value)
		_node.PhoneConfirmedAt = value
	}
	if value, ok := pc.mutation.Language(); ok {
		_spec.SetField(profile.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := pc.mutation.IsSSOUser(); ok {
		_spec.SetField(profile.FieldIsSSOUser, field.TypeBool, value)
		_node.IsSSOUser = value
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	err      error
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
