// Code generated by ent, DO NOT EDIT.

package profile

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailConfirmedAt holds the string denoting the email_confirmed_at field in the database.
	FieldEmailConfirmedAt = "email_confirmed_at"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPhoneConfirmedAt holds the string denoting the phone_confirmed_at field in the database.
	FieldPhoneConfirmedAt = "phone_confirmed_at"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldIsSSOUser holds the string denoting the is_sso_user field in the database.
	FieldIsSSOUser = "is_sso_user"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldFullName,
	FieldEmail,
	FieldEmailConfirmedAt,
	FieldPhone,
	FieldPhoneConfirmedAt,
	FieldLanguage,
	FieldIsSSOUser,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFullName holds the default value on creation for the "full_name" field.
	DefaultFullName string
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultIsSSOUser holds the default value on creation for the "is_sso_user" field.
	DefaultIsSSOUser bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Profile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailConfirmedAt orders the results by the email_confirmed_at field.
func ByEmailConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailConfirmedAt, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPhoneConfirmedAt orders the results by the phone_confirmed_at field.
func ByPhoneConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneConfirmedAt, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByIsSSOUser orders the results by the is_sso_user field.
func ByIsSSOUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSSOUser, opts...).ToFunc()
}
