// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nartvt/profile-service/ent/predicate"
	"github.com/nartvt/profile-service/ent/profile"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfileUpdate) SetUpdatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProfileUpdate) SetUserID(s string) *ProfileUpdate {
	pu.mutation.SetUserID(s)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableUserID(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetUserID(*s)
	}
	return pu
}

// SetFullName sets the "full_name" field.
func (pu *ProfileUpdate) SetFullName(s string) *ProfileUpdate {
	pu.mutation.SetFullName(s)
	return pu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableFullName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetFullName(*s)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *ProfileUpdate) SetEmail(s string) *ProfileUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableEmail(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// SetEmailConfirmedAt sets the "email_confirmed_at" field.
func (pu *ProfileUpdate) SetEmailConfirmedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetEmailConfirmedAt(t)
	return pu
}

// SetNillableEmailConfirmedAt sets the "email_confirmed_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableEmailConfirmedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetEmailConfirmedAt(*t)
	}
	return pu
}

// SetPhone sets the "phone" field.
func (pu *ProfileUpdate) SetPhone(s string) *ProfileUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePhone(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (pu *ProfileUpdate) SetPhoneConfirmedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetPhoneConfirmedAt(t)
	return pu
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePhoneConfirmedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetPhoneConfirmedAt(*t)
	}
	return pu
}

// SetLanguage sets the "language" field.
func (pu *ProfileUpdate) SetLanguage(s string) *ProfileUpdate {
	pu.mutation.SetLanguage(s)
	return pu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableLanguage(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetLanguage(*s)
	}
	return pu
}

// SetIsSSOUser sets the "is_sso_user" field.
func (pu *ProfileUpdate) SetIsSSOUser(b bool) *ProfileUpdate {
	pu.mutation.SetIsSSOUser(b)
	return pu
}

// SetNillableIsSSOUser sets the "is_sso_user" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableIsSSOUser(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetIsSSOUser(*b)
	}
	return pu
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(profile.FieldUserID, field.TypeString, value)
	}
	if value, ok := pu.mutation.FullName(); ok {
		_spec.SetField(profile.FieldFullName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.SetField(profile.FieldEmail, field.TypeString, value)
	}
	if value, ok := pu.mutation.EmailConfirmedAt(); ok {
		_spec.SetField(profile.FieldEmailConfirmedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(profile.FieldPhone, field.TypeString, value)
	}
	if value, ok := pu.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(profile.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Language(); ok {
		_spec.SetField(profile.FieldLanguage, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsSSOUser(); ok {
		_spec.SetField(profile.FieldIsSSOUser, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfileUpdateOne) SetUpdatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *ProfileUpdateOne) SetUserID(s string) *ProfileUpdateOne {
	puo.mutation.SetUserID(s)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableUserID(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetUserID(*s)
	}
	return puo
}

// SetFullName sets the "full_name" field.
func (puo *ProfileUpdateOne) SetFullName(s string) *ProfileUpdateOne {
	puo.mutation.SetFullName(s)
	return puo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableFullName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetFullName(*s)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *ProfileUpdateOne) SetEmail(s string) *ProfileUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableEmail(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// SetEmailConfirmedAt sets the "email_confirmed_at" field.
func (puo *ProfileUpdateOne) SetEmailConfirmedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetEmailConfirmedAt(t)
	return puo
}

// SetNillableEmailConfirmedAt sets the "email_confirmed_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableEmailConfirmedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetEmailConfirmedAt(*t)
	}
	return puo
}

// SetPhone sets the "phone" field.
func (puo *ProfileUpdateOne) SetPhone(s string) *ProfileUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePhone(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (puo *ProfileUpdateOne) SetPhoneConfirmedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetPhoneConfirmedAt(t)
	return puo
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePhoneConfirmedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetPhoneConfirmedAt(*t)
	}
	return puo
}

// SetLanguage sets the "language" field.
func (puo *ProfileUpdateOne) SetLanguage(s string) *ProfileUpdateOne {
	puo.mutation.SetLanguage(s)
	return puo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableLanguage(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetLanguage(*s)
	}
	return puo
}

// SetIsSSOUser sets the "is_sso_user" field.
func (puo *ProfileUpdateOne) SetIsSSOUser(b bool) *ProfileUpdateOne {
	puo.mutation.SetIsSSOUser(b)
	return puo
}

// SetNillableIsSSOUser sets the "is_sso_user" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableIsSSOUser(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetIsSSOUser(*b)
	}
	return puo
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(profile.FieldUserID, field.TypeString, value)
	}
	if value, ok := puo.mutation.FullName(); ok {
		_spec.SetField(profile.FieldFullName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.SetField(profile.FieldEmail, field.TypeString, value)
	}
	if value, ok := puo.mutation.EmailConfirmedAt(); ok {
		_spec.SetField(profile.FieldEmailConfirmedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(profile.FieldPhone, field.TypeString, value)
	}
	if value, ok := puo.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(profile.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Language(); ok {
		_spec.SetField(profile.FieldLanguage, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsSSOUser(); ok {
		_spec.SetField(profile.FieldIsSSOUser, field.TypeBool, value)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
